# Updated R script with trading day alignment

library(quantmod)
library(ghyp)
library(copula)
library(cubature)
library(Rglpk)
library(fBasics)
library(PortfolioAnalytics)
library(ROI)
library(ROI.plugin.glpk)
library(parallel)

set.seed(123)

symbols <- c("AAPL","NFLX","TSLA","MSFT","PFE","JPM","MS","F")

get_returns <- function(sym, from = "2013-01-01", to = "2016-12-31") {
  dat <- getSymbols(sym, src = "yahoo", from = from, to = to, auto.assign = FALSE)
  prices <- Ad(dat)
  dailyReturn(prices, type = "log")
}

returns_list <- lapply(symbols, get_returns)
returns <- do.call(merge, returns_list)
colnames(returns) <- symbols
returns <- na.omit(returns)

start_date <- as.Date("2015-12-31")
start_index <- which(index(returns) == start_date)
stopifnot(start_index >= 252)

levy_nig_safe <- function(x, alpha, beta, delta, eps = 1e-10) {
  x2 <- ifelse(abs(x) < eps, sign(x) * eps, x)
  v <- delta * alpha / pi * exp(beta * x2) * besselK(alpha * abs(x2), 1, expon.scaled = TRUE) / abs(x2)
  v[!is.finite(v)] <- 0
  v
}

build_Uinv <- function(pars, x_min = 1e-5, x_max = 0.05, n_grid = 20000) {
  gpos <- exp(seq(log(x_min), log(x_max), length.out = n_grid))
  dpos <- levy_nig_safe(gpos, pars["alpha"], pars["beta"], pars["delta"])
  tail_pos <- rev(cumsum(rev((dpos[-1]+dpos[-n_grid])/2 * diff(gpos))))
  inv_pos <- approxfun(tail_pos, gpos[-1], method="linear", rule=2)
  
  gneg <- -rev(gpos)
  dneg <- levy_nig_safe(gneg, pars["alpha"], pars["beta"], pars["delta"])
  tail_neg <- cumsum((dneg[-1]+dneg[-n_grid])/2 * diff(gneg))
  tail_neg <- -tail_neg
  inv_neg <- approxfun(tail_neg, gneg[-1], method="linear", rule=2)
  
  function(u) {
    tiny <- 1e-12
    u <- ifelse(u >= 0, pmax(u, tiny), pmin(u, -tiny))
    ifelse(u >= 0, inv_pos(u), inv_neg(u))
  }
}

one_tail <- function(ax, side, alpha, beta, delta) {
  f <- function(x) levy_nig_safe(x, alpha, beta, delta)
  if (side == "pos")
    hcubature(f, lowerLimit = ax, upperLimit = Inf)$integral
  else
    hcubature(f, lowerLimit = -Inf, upperLimit = -ax)$integral
}

Finv_Gumbel <- function(xi, v, theta, eta = 1e-12) {
  v <- pmax(pmin(v, 1 - eta), eta)
  ((v)^(-theta) - xi^(-theta))^(-1/theta)
}

select_optimal_tau <- function(nig_marg, Uinv_list, tau_grid = seq(10, 200, by = 10), eps_target = 0.01, method = c("mean", "max")) {
  method <- match.arg(method)
  compute_Aj <- function(pars, f_Uinv, tau) {
    epsilon <- abs(f_Uinv(tau))
    f <- function(x) x * levy_nig_safe(x, pars["alpha"], pars["beta"], pars["delta"])
    A_pos <- hcubature(f, lowerLimit = 1e-10, upperLimit = epsilon)$integral
    A_neg <- hcubature(f, lowerLimit = -epsilon, upperLimit = -1e-10)$integral
    A_pos + A_neg
  }
  error_vals <- sapply(tau_grid, function(tau) {
    A_vals <- mapply(compute_Aj, nig_marg, Uinv_list, MoreArgs = list(tau = tau))
    if (method == "mean") mean(A_vals) else max(A_vals)
  })
  if (all(error_vals > eps_target)) {
    warning("No tau satisfies the error threshold. Returning largest tau.")
    return(tau_grid[which.min(error_vals)])
  }
  tau_grid[which(error_vals < eps_target)[1]]
}

window_len <- 252
horizon <- 63
alphaCVaR <- 0.95
Nsim <- 1000
tau <- 200
Kmax <- 10 * tau
Nroll <- 4
d <- length(symbols)

weight_hist <- matrix(NA_real_, nrow = Nroll, ncol = d, dimnames = list(NULL, symbols))
ret_hist <- numeric(Nroll)
theta_hist <- numeric(Nroll)

n_cores <- detectCores()
cl <- makeCluster(n_cores)

for (i in seq_len(Nroll)) {
  t0 <- start_index + (i - 1) * horizon
  win <- returns[(t0 - window_len):(t0 - 1), ]
  
  nig_marg <- lapply(symbols, function(sym) {
    data <- coredata(win[, sym])
    f <- nigFit(data[abs(data) > 0], alpha = 1, beta = 0, delta = 1, mu = 0, doplot = FALSE, silent = TRUE)
    f@fit$estimate
  })
  names(nig_marg) <- symbols
  
  Uinv_win <- lapply(nig_marg, build_Uinv)
  posProb_win <- sapply(nig_marg, function(p) 1 - pnig(0, alpha = p["alpha"], beta = p["beta"], delta = p["delta"], mu = p["mu"]))
  
  Gamma <- sapply(symbols, function(sym) {
    xvec <- coredata(win[, sym])
    pars <- nig_marg[[sym]][c("alpha", "beta", "delta")]
    sapply(seq_along(xvec), function(k)
      one_tail(abs(xvec[k]), if (xvec[k] >= 0) "pos" else "neg", pars["alpha"], pars["beta"], pars["delta"]))
  })
  Gamma[!is.finite(Gamma)] <- 0
  tau <- select_optimal_tau(nig_marg, Uinv_win, eps_target = 0.01, method = "mean")
  Umat <- pobs(Gamma, ties.method = "average")
  fitG <- fitCopula(archmCopula("gumbel", dim = d, param = 1.2), Umat, method = "mpl")
  theta_t <- coef(fitG)
  theta_hist[i] <- theta_t
  
  get21 <- function() {
    Z21 <- numeric(d)
    for (day in 1:horizon) {
      Z1 <- numeric(d)
      Gii <- cumsum(rexp(Kmax))
      for (k in seq_len(Kmax)) {
        if (Gii[k] > tau) next
        if (runif(1) > 1 / 252) next
        Gij <- numeric(d); Gij[1] <- Gii[k]
        for (j in 2:d) Gij[j] <- Finv_Gumbel(Gii[k], runif(1), theta_t)
        abs_xk <- mapply(function(f, u) f(u), Uinv_win, Gij)
        sign_xk <- ifelse(runif(d) < posProb_win, 1, -1)
        Z1 <- Z1 + sign_xk * abs_xk
      }
      compA <- mapply(function(pars, f_Uinv) {
        epsilon <- abs(f_Uinv(tau))
        f <- function(x) x * levy_nig_safe(x, pars["alpha"], pars["beta"], pars["delta"])
        A_pos <- hcubature(f, lowerLimit = 1e-10, upperLimit = epsilon)$integral
        A_neg <- hcubature(f, lowerLimit = -epsilon, upperLimit = -1e-10)$integral
        A_pos + A_neg
      }, nig_marg, Uinv_win)
      Z21 <- Z21 + (Z1 - (1 / 252) * compA)
    }
    Z21
  }
  
  clusterExport(cl, varlist = c("get21", "Uinv_win", "posProb_win", "theta_t", "nig_marg", 
                                "levy_nig_safe", "hcubature", "Kmax", "tau", "d", 
                                "Finv_Gumbel", "horizon"))
  clusterEvalQ(cl, { library(cubature) })
  
  scen <- parLapply(cl, 1:Nsim, function(i) get21())
  scen <- do.call(rbind, scen)
  scen <- scen[complete.cases(scen), , drop = FALSE]
  available_dates <- index(returns)
  end_index <- min(t0 + nrow(scen) - 1, length(available_dates))
  sim_dates <- available_dates[t0:end_index]
  
  # Truncate scen matrix to match sim_dates if necessary
  scen <- scen[seq_len(length(sim_dates)), , drop = FALSE]
  scen_xts <- xts::xts(scen, order.by = sim_dates)
  
  portf_spec <- portfolio.spec(assets = colnames(scen_xts))
  portf_spec <- add.constraint(portf_spec, type = "full_investment")
  portf_spec <- add.constraint(portf_spec, type = "long_only")
  portf_spec <- add.objective(portf_spec, type = "risk", name = "ES", arguments = list(p = 1 - alphaCVaR))
  
  opt_result <- optimize.portfolio(R = scen_xts, portfolio = portf_spec, optimize_method = "ROI")
  w_t <- extractWeights(opt_result)
  weight_hist[i, ] <- w_t
  
  daily_returns <- returns[t0:(t0 + horizon - 1), ]
  portf_daily_ret <- xts::xts(as.numeric(daily_returns %*% w_t), order.by = index(daily_returns))
  
  if (i == 1) {
    full_daily_ret <- portf_daily_ret
  } else {
    full_daily_ret <- rbind(full_daily_ret, portf_daily_ret)
  }
  ret_hist[i] <- 100 * (exp(sum(portf_daily_ret)) - 1)
}
stopCluster(cl)


print(returns)

roll_dates <- index(returns)[start_index + (0:(Nroll - 1)) * horizon]
print(roll_dates)


Cairo::CairoPNG("weight_QuatarGumble1.png", width = 800, height = 600)
matplot(x = roll_dates, y = weight_hist, type = "l", lty = 1, col = 1:d,
        xaxt = "n", xlab = "Date", ylab = "Weight",
        main = "95% CVaR-optimal Weights of Levy Gumbel copula (63 day horizon)")
tick_locs <- seq(from = min(roll_dates), to = max(roll_dates), by = "3 months")
axis(1, at = tick_locs, labels = format(tick_locs, "%b %Y"))
legend("topright", legend = symbols, col = 1:d, lty = 1, cex = 0.8)
dev.off()


Cairo::CairoPNG("PortreturnQuatar1_Gymbel.png", width = 800, height = 600)
plot(index(full_daily_ret), 100 * (exp(cumsum(full_daily_ret)) - 1), type = "l", col = "darkgreen",
     xaxt = "n", xlab = "Date", ylab = "Cumulative return (%)",
     main = "Cumulative 63-day horizon portfolio return with Gumbel's copula")
tick_locs_ret <- seq(from = min(index(full_daily_ret)), to = max(index(full_daily_ret)), by = "3 month")
axis(1, at = tick_locs_ret, labels = format(tick_locs_ret, "%b %Y"))
abline(h = 0, lty = 2)
dev.off()









